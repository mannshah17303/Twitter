<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <style>
      body {
        font-family: "Arial", sans-serif;
        background-color: #15202b;
        color: #fff;
        margin: 0;
        padding: 0;
      }

      h1 {
        text-align: center;
        padding: 20px;
        background: #1da1f2;
        margin: 0;
      }

      .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #1da1f2; /* Twitter blue */
        padding: 10px 20px;
        position: fixed;
        width: 100%;
        top: 0;
        left: 0;
        height: 50px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 1000;
      }

      .nav-text {
        font-size: 18px;
        color: white;
        font-weight: bold;
      }

      .logo {
        display: flex;
        align-items: center;
      }

      .fab.fa-twitter {
        font-size: 30px;
        color: white;
        margin-right: 10px;
      }
      .profile {
        display: flex;
        align-items: center;
        margin-right: 25px;
      }
      .profile img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        border: 2px solid white;
        transition: 0.3s;
      }

      .profile img:hover {
        opacity: 0.8;
      }

      .profile h4 {
        margin-left: 5px;
      }

      .main {
        display: flex;
        justify-content: space-around;
        gap: 20px;
        padding: 90px 20px 20px;
      }

      #studentRecords,
      #showAllTweets {
        width: 45%;
        background: #192734;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
      }

      #studentRecords{
        width: 20% !important;
      }

      table {
        width: 100%;
        border-collapse: collapse;
      }
      thead {
        background-color: #1da1f2;
      }
      td {
        padding: 12px;
        text-align: center;
        border-bottom: 1px solid #37444d;
      }

      .tweet-card {
        background: #22303c;
        color: white;
        padding: 15px;
        border-radius: 12px;
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
      }

      .tweet-card img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
      }

      .tweet-content {
        flex: 1;
      }

      .tweet-icons {
        display: flex;
        gap: 15px;
      }
      .tweet-icons i {
        cursor: pointer;
        color: #1da1f2;
        transition: 0.3s;
      }
      .tweet-icons i:hover {
        color: #0d8bf0;
      }

      .tweet-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
      }

      .profile-info {
        display: flex;
        align-items: center;
      }

      .profile-info img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
      }

      .tweet-time {
        font-size: 12px;
        color: gray;
        text-align: right;
      }
      .tweet-content {
        margin-top: 8px;
        font-size: 16px;
      }

      .tweet-actions {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-top: 10px;
        color: #657786;
      }

      .tweet-actions i {
        cursor: pointer;
        font-size: 18px;
      }

      .tweet-actions i:hover {
        color: #1da1f2;
      }

      .like-active {
        color: #e0245e !important;
      }

      .view-btn {
        display: inline-block;
        padding: 8px 16px;
        background-color: #007bff; /* Bootstrap primary blue */
        color: white;
        text-decoration: none;
        border-radius: 6px;
        font-weight: bold;
        transition: background-color 0.3s, transform 0.2s;
      }

      .view-btn:hover {
        background-color: #0056b3; /* Darker blue */
        transform: scale(1.05);
      }

      .view-btn:active {
        background-color: #004494;
        transform: scale(0.98);
      }

      .tweet-media {
        height: 1000px;
      }

      tr img {
        width: 50px;
        height: 50px;
        border-radius: 50%;
      }

      .logout{
        width: 100px;
        padding-top: 8px;
        padding-bottom: 8px;
        background-color: rgb(252, 66, 66);
        border-radius: 7px;
        text-transform: uppercase;
        margin-left: 10px;
        cursor: pointer;
      }
      

      .logout a{
        align-items: center;
        justify-content: center;
        display: flex;
        font-weight: 600;
        color: white;
      }

      .container {
        width: 300px;
        background: #192734;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(255, 255, 255, 0.1);
      }

      h1 {
        text-align: center;
        font-size: 20px;
        margin-bottom: 15px;
      }

      textarea {
        width: 100%;
        height: 120px;
        padding: 12px;
        border: none;
        border-radius: 8px;
        background-color: #253341;
        color: white;
        font-size: 16px;
        resize: none;
        outline: none;
      }

      textarea::placeholder {
        color: #8899a6;
      }

      .tweet-btn {
        display: block;
        width: 100%;
        background-color: #1da1f2;
        color: white;
        border: none;
        padding: 12px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 30px;
        cursor: pointer;
        transition: background 0.3s ease;
        margin-top: 10px;
      }

      .tweet-btn:hover {
        background-color: #1991db;
      }

      .tweet-btn:disabled {
        background-color: #3a506b;
        cursor: not-allowed;
      }

      .file-upload-container {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        margin: 10px 0;
      }

      .custom-file-upload {
        display: inline-block;
        padding: 12px 20px;
        border-radius: 6px;
        background-color: #1da1f2;
        color: white;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        text-align: center;
        transition: background 0.3s;
      }

      .custom-file-upload:hover {
        background-color: #0d8bd9;
      }

      #file {
        display: none;
      }

      #file-name {
        margin-top: 8px;
        font-size: 14px;
        color: #8899a6;
      }
      #show_img{
        width: 100px;
        height: 100px;
        display: none;
      }

      .back-btn {
        display: block;
        width: 100%;
        background-color: #28a745;
        color: white;
        border: none;
        padding: 12px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 30px;
        cursor: pointer;
        transition: background 0.3s ease;
        margin-top: 10px;
      }

      .back-btn:hover {
        background-color: green;
      }
    </style>
  </head>
  <body>
    <header class="navbar">
      <div class="logo">
        <i class="fab fa-twitter"></i>

        <span class="nav-text">Twitter</span>
        
      </div>

      <div class="profile">
        <img
          src=""
          id="loggedin_user_profile"
          onclick="viewloggedinuserprofile()"
          alt="Profile"
          id="profileIcon"
        />
        <h4 id="loggedin_user_name"></h4>
        
        
        <div onclick="logoutFunction()" class="logout">
        
          <a>Logout</a>
        </div>
        
      </div>
      
    </header>
    <div class="main">
      <div class="container">
        <h1>What's happening?</h1>
        <div class="profile-img-container">
          <img src="" id="show_img" alt="" />
        </div>
        <form id="tweet-form" method="post" enctype="multipart/form-data">
          <textarea id="tweet-text" name="text" maxlength="380" placeholder="Type your tweet..."></textarea>
          <div class="file-upload-container">
            <label for="file" class="custom-file-upload"
              >Select Media</label
            >
            <input
              type="file"
              name="file"
              id="file"
              onchange="previewFunction()"
            />
            <span id="file-name">No file chosen</span>
            <p id="show_message"></p>
          </div>
          <input type="submit" value="Tweet" class="tweet-btn" id="tweet-btn" disabled />
        </form>
        
      </div>
      <div id="showAllTweets"></div>
      <div id="studentRecords" style="width: 30%;"></div>
    </div>
    <script>
     

      async function generate_paragraph(details) {
      
        const response = await fetch(`/retweet-status/${details.tweet_id}`);
        if (response.ok) {
          const data = await response.json();
          
          
          if (data.status == 1) {
            
            // The data is reposted data
            var string = ` Original Tweet By ${data.user_details[0].first_name} ${data.user_details[0].last_name}`;
             string= `${details.tweet_content}
             
             <a style="color:#0d8bd9;" href='/profile/${data.user_details[0].user_id}'>
             <p>${string}</p></a>`
          }
          else
          {
            var string=`${details.tweet_content}`;
          }
          return string;
        }
      }

      async function fetchUsersData() {
        const response = await fetch(`/home/authenticatetoken`, {
          method: "get",
          headers: {
            logintoken: `${localStorage.getItem("logintoken")}`,
          },
        });
        if (response.ok) {
          const userdata = await response.json();
          const data = userdata.data;
          displayUserData(data);
          
        } else {
          localStorage.removeItem("logintoken");
          alert("token expired you must login again");
          window.location.href = "/login";
        }
      }

      async function displayUserData(students_data) {
        const studentData = document.getElementById("studentRecords");
        studentData.innerHTML = "";

        if (students_data.length > 0) {
          const tableStudent = document.createElement("table");

          const rowStudentHead = document.createElement("thead");
          rowStudentHead.innerHTML = `
        
           
            
           
          
        `;
          tableStudent.appendChild(rowStudentHead);

          students_data.forEach((student) => {
            const view_profile_photo = `${student.profile_photo}`;
            
            const updated_view_profile_photo = `${view_profile_photo}`
              .split("/")
              .slice(1)
              .join("/");
           
            const studentRow = document.createElement("tr");
          
            studentRow.innerHTML = `
             
              <td><img src="${updated_view_profile_photo}" /></td>
              
             
              <td class="action-links" style='display:flex;flex-direction:column; justify-content:center; align-items:center'>
                 ${student.first_name} ${student.last_name}
                <a href="/profile/${student.user_id}" class="view-btn" style="width:30%">View</a>
              </td>
          `;
            tableStudent.appendChild(studentRow);
          });
          studentData.appendChild(tableStudent);
        } else {
          studentData.innerHTML = "<p>No records in student data</p>";
        }
      }

      async function calculatingLikeCount(tweet)
      {
        const response = await fetch(`/likesCount/${tweet.tweet_id}`, {
            method: "get",
            headers: {
              logintoken: `${localStorage.getItem("logintoken")}`,
            },
          });
          if (response.ok) {
            const data = await response.json();
         
            const likeCount = data.countResult[0].total;
            const userLiked = data.userLiked;
          
            return [likeCount,userLiked];
          }
      }

      async function fetchAllTweets() {
        const response = await fetch(`/fetchAlltweets`, {
          method: "get",
          headers: {
            logintoken: `${localStorage.getItem("logintoken")}`,
          },
        });
        if (response.ok) {
          const tweetsData = await response.json();
          const data = tweetsData.tweets;
          
          displayTweetsContent(data);
        }
      }

      async function displayTweetsContent(tweetsData) {
       
        const tweetsContainer = document.getElementById("showAllTweets");
        tweetsContainer.innerHTML = "";
        let icon_id = 1;

        tweetsData.forEach(async (tweet) => {

  

            let created_time = new Date(tweet.tweet_created_at);

            let current_time = new Date();
            let utc = new Date(current_time.getTime()+current_time.getTimezoneOffset()*60000)

            


            //doing like this so that all new tweets comes  in front  
            const [[likeCount,userLiked],p] = await Promise.all([
              
              calculatingLikeCount(tweet),
              generate_paragraph(tweet)
            ]);


 

            let difference_in_time = utc - created_time;
            let hours = Math.floor(difference_in_time / (1000 * 60 * 60));
            let minutes = Math.floor((difference_in_time / (1000 * 60)) % 60);
            
            let image_path = `${tweet.profile_photo}`
              .split("/")
              .slice(1)
              .join("/");
            let tweet_media = `${tweet.tweet_media}`;
            
            let updated_tweet_media = `/media/${tweet_media}`;


            const tweetCard = document.createElement("div");
            tweetCard.className = "tweet-card";

            tweetCard.innerHTML = `
               <div class="tweet-header">
                  <div class="profile-info">
                    
                    <img src="${image_path}" alt="Profile Photo">
                    <h3>${tweet.first_name} ${tweet.last_name}</h3>
                    </div>

                    <div class="tweet-time">posted ${hours}hr ${minutes}min ago</div>
                </div>
              
              <p>${p}</p>
              ${
                tweet_media == "null"
                  ? ""
                  : `<img style="width:100%; height:auto; object-fit:cover; border-radius:0" src="${updated_tweet_media}">`
              }

              <div class="tweet-actions">
                 <i class="${
                   userLiked ? "fas fa-heart like-active" : "far fa-heart"
                 }" 
                       onClick="toggleLike(${tweet.tweet_id}, this)"></i>
                <span>${likeCount}</span>
                <i
                  class="fa fa-retweet"
                  onClick="reTweetFunction(${tweet.tweet_id})"
                ></i>
              </div>
              `;

            tweetsContainer.appendChild(tweetCard);
          
        });
      }

      async function toggleLike(tweet_id, icon) {
        const isLiked = icon.classList.contains("like-active");
        const url = isLiked ? `/unlike/${tweet_id}` : `/like/${tweet_id}`;

        const response = await fetch(url, {
          method: "get",
          headers: {
            logintoken: localStorage.getItem("logintoken"),
          },
        });

        if (response.ok) {
          const data = await response.json();
          const likeCount = data.countResult[0].total;

          if (isLiked) {
            icon.classList.replace("fas", "far"); // Change filled heart to regular
            icon.classList.remove("like-active"); // Remove red color
          } else {
            icon.classList.replace("far", "fas"); // Change regular heart to filled
            icon.classList.add("like-active"); // Add red color
          }

          icon.nextElementSibling.innerText = likeCount;
        }
      }

      async function reTweetFunction(tweet_id) {
        const response = await fetch(`/retweet/${tweet_id}`, {
          method: "get",
          headers: {
            logintoken: `${localStorage.getItem("logintoken")}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
        }
      }

      async function fetchLoggedinUserProfilePhoto() {
        const response = await fetch("/loggedin-user-profile-photo", {
          method: "get",
          headers: {
            logintoken: `${localStorage.getItem("logintoken")}`,
          },
        });
        if (response.ok) {
          const profileData = await response.json();
          
          const fetchedProfilePath =
            profileData.fetchedProfileResult[0].profile_photo;
         
          let image_path = `${fetchedProfilePath}`
            .split("/")
            .slice(1)
            .join("/");
          
          document.getElementById("loggedin_user_name").innerHTML =
            profileData.fetchedProfileResult[0].first_name +
            " " +
            profileData.fetchedProfileResult[0].last_name;
          document.getElementById("loggedin_user_profile").src = image_path;
        }
      }

      async function viewloggedinuserprofile() {
        const response = await fetch("/view_loggedinuser_profile", {
          method: "get",
          headers: {
            logintoken: `${localStorage.getItem("logintoken")}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
         
          window.location.href = `/profile/${data.loggedinuserProfile.user_id}`;
        }else{
          localStorage.removeItem("logintoken");
          alert("token expired you must login again");
          window.location.href = "/login";
        }
      }
      
      
      const textArea = document.getElementById("tweet-text");
      const submitBtn = document.getElementById("tweet-btn");

      // Enable button only if there's text
      textArea.addEventListener("input", () => {
        submitBtn.disabled = textArea.value.trim() === "";
      });

      document.getElementById("tweet-form").addEventListener("submit", async function (event) {
        event.preventDefault();
        const tweetData = new FormData(this);

        const response = await fetch(`/submit_form`, {
          method: "POST",
          body: tweetData,
          headers:{
            logintoken: `${localStorage.getItem('logintoken')}`
          }
        });

        if (response.ok) {
          // window.location.href = `/profile/${user_id}`;
          window.location.href = `/home`;

        } else {
          const errorMessage = await response.text();
          alert(errorMessage);
          // localStorage.removeItem("logintoken");
          // alert("token expired you must login again");
          // window.location.href = "/login";
          
        }
      });

      function previewFunction() {
        var input = document.getElementById("file");
        var fileNameDisplay = document.getElementById("file-name");
        var img = document.getElementById("show_img");
        var fReader = new FileReader();
        if (input.files.length > 0) {
          var file = input.files[0];
          var fileType = file.type;
          fileNameDisplay.textContent = file.name;
          

          fReader.readAsDataURL(file);
          fReader.onloadend = function (event) {
            img.src = event.target.result;
            img.style.display = "inline";

            img.style.marginBottom = "30px";
            document.getElementById("show_message").innerHTML = "";
          };
        } else {
          fileNameDisplay.textContent = "No file chosen";
          input.value = "";
          img.style.display = "none";
          document.getElementById("show_message").innerHTML =
            "Please upload a valid image file (PNG, JPG, or JPEG).";
          document.getElementById("show_message").style.fontWeight = "700";
          document.getElementById("show_message").style.color = "red";
        }
      }

     
      window.onload = () => {
        fetchUsersData();
        fetchAllTweets();
        fetchLoggedinUserProfilePhoto();
      };

      function logoutFunction(){
        const logout_confirmation = confirm("Are you sure you want to logout?")
        if(logout_confirmation){

          localStorage.removeItem('logintoken');
          window.location.href = '/login';
        }else{
          window.location.href = '/home';
        }
    }
    </script>
  </body>
</html>
